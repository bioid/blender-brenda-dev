cat >bake.py <<EOF
'''
Brenda template for distributed cycles baking
'''
import bpy
import sys

# quality settings
bpy.context.scene.render.resolution_x = $BLENDER_RENDER_RESOLUTION_X
bpy.context.scene.render.resolution_y = $BLENDER_RENDER_RESOLUTION_Y
bpy.context.scene.render.resolution_percentage = $BLENDER_RENDER_RESOLUTION_PERCENTAGE
bpy.context.scene.cycles.samples = $BLENDER_CYCLES_SAMPLES
bpy.context.scene.cycles.device = "$BLENDER_CYCLES_DEVICE"

try:
  bpy.context.user_preferences.system.compute_device_type = 'CUDA'
  bpy.context.user_preferences.system.compute_device = 'CUDA_0'
except:
  pass

# config
lightmapsize_width = $BLENDER_RENDER_RESOLUTION_X
lightmapsize_height = $BLENDER_RENDER_RESOLUTION_Y

baketype = "$BLENDER_BAKE_TYPE"
uvlayername = "$BLENDER_BAKE_UVLAYER"
bakemargin = $BLENDER_BAKE_MARGIN

# determine outdir from blender arguments
argv = sys.argv[sys.argv.index("--") + 1:] 
outdir = '.'
if len(argv) > 0:
	outdir = argv[0]

bakematerials = {} 
bakeimages = {} 
objects = [obj for obj in bpy.context.scene.objects if obj.type == 'MESH' and uvlayername in obj.data.uv_layers]

def get_lightmap_name(slotnum, obj):
	# Search through material nodes to see if there's an ImageTexture node named 'lightmap-image'
	material = obj.material_slots[slotnum].material
	nodes = material.node_tree.nodes
	for n in nodes:
		if n.type == 'TEX_IMAGE' and n.name == 'lightmap-image':
			print("found lightmap for %s: %s" % (obj.name, n.image.name))
			return n.image.name
	# couldn't find an existing lightmap image, so use a default name
	return 'lightmap'

def get_material(slotnum, obj):
	lightmapname = get_lightmap_name(slotnum, obj)
	if lightmapname not in bakeimages:
		fullname = lightmapname + '_' + obj.name
		bpy.ops.image.new(name=fullname, width=lightmapsize_width, height=lightmapsize_height, alpha=True)
		bakeimages[lightmapname] = bpy.data.images[fullname]
		
	if lightmapname not in bakematerials:
		print("create new material for %s" % lightmapname)
		# set up baking material
		bakemat = bpy.data.materials.new('bake-%03d' % (slotnum))
		bakemat.use_nodes = True
		tree = bakemat.node_tree
		nodes = tree.nodes
		links = tree.links
		nodes.clear()

		# Basic node setup
		bakenodes = {}
		bakenodes['output'] = nodes.new(type='ShaderNodeOutputMaterial')
		bakenodes['diffuse'] = nodes.new(type='ShaderNodeBsdfDiffuse')
		bakenodes['baketex'] = nodes.new(type='ShaderNodeTexImage')
		bakenodes['uvmap'] = nodes.new(type='ShaderNodeUVMap')
		bakenodes['uvmap'].uv_map = "LightMap"

		# Create new bake texture 
		# FIXME - shouldn't hardcode size, but we can always render at high-quality and downsample
		# FIXME - should create one lightmap for each unique lightmap that's already mapped to this object

		bakeimg = bakeimages[lightmapname]
		
		bakenodes['baketex'].image = bakeimg
		bakenodes['baketex'].select = True
		nodes.active = bakenodes['baketex']

		links.new(bakenodes['uvmap'].outputs['UV'], bakenodes['baketex'].inputs['Vector'])
		links.new(bakenodes['diffuse'].outputs['BSDF'], bakenodes['output'].inputs['Surface'])

		bakematerials[lightmapname] = bakemat

	return bakematerials[lightmapname]

def bake_object(objnum):
	obj = objects[objnum]

	bpy.context.scene.objects.active = obj

	obj.select = True

	print("object %s has %s material slots" % (obj.name, len(obj.material_slots)))
	for ms in range(0, len(obj.material_slots)):
		obj.material_slots[ms].material = get_material(ms, obj)
		print("updated material: %s" % obj.material_slots[ms].material.name)



	# bake it!
	bpy.ops.object.bake(type=baketype, use_clear=True, margin=bakemargin)

	print("baked!")
	for img in bakeimages:
		fname = outdir + '/' + img + '_' + obj.name + '.png'
		print("save lightmap: %s" % (fname))
		bakeimages[img].save_render(fname)

bake_object($START)
EOF
blender -b $BLENDER_FILE -P bake.py -F PNG -t 0 -- $OUTDIR


